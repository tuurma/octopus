<?xml version="1.0" encoding="UTF-8"?>
<?teipublisher odd="documentation.odd"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Introduction to TEI</title>
                <author>Magdalena Turska</author>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
            </publicationStmt>
            <sourceDesc>
                <p>Workshop material for Digital Humanities Beirut 2017</p>
            </sourceDesc>
        </fileDesc>
    </teiHeader>
    <text>
        <body>
            <div>
                <head>Introduction to TEI</head>
                <div>
                    <head>Workshop outline</head>
                    
                    <list>
                    <item>What 'digital' means for editions
                        <list>
                            <item>Sahle's definition</item>
                            <item>Digital vs Vanilla Print</item>
                            <item>modelling aspect</item>
                            <item>markup</item>
                            <item>community standard: TEI</item>
                        </list>
                    </item>
                    <item>TEI Universe
                        <list>
                            <item>TEI Guidelines</item>
                            <item>TEI Infrastructure</item>
                            <item>TEI consortium</item>
                            <item>TEI community</item>
                        </list>
                    </item>
                    <item>XML foundations
                        <list>
                            <item>elements and attributes</item>
                            <item>well-formedness</item>
                            <item>validity</item>
                            <item>namespacess</item>
                            <item>vocabularies</item>
                        </list>
                    </item>
                    <item>TEI Overview
                        <list>
                            <item>TEI documents</item>
                            <item>teiHeader</item>
                            <item>text structure: divisions, paragraphs, speeches or ab</item>
                            <item>highlights: hi, emph, foreign, title etc</item>
                            <item>regularization, abbreviations and corrections</item>
                            <item>people and places</item>
                            <item>dates</item>
                            <item>and other funky stuff</item>
                        </list>
                    </item>
                    </list>
                </div>
                <div>
                    <head>What are we doing when we are editing?</head>

                    <quote>“What is text? I am not so naïve as to imagine that question could ever be
                    finally settled. Asking such a question is like asking ‘How long is the coast
                    of England?’.”</quote>
                    <author>J. McGann</author>

                    <quote>“Text is what you look at. And how you look at it.”</quote>
                    <author>P. Sahle</author>
                    
                    <quote>“In getting my books, I have always been
                    solicitous of an ample margin; this is not so much through any love of the
                    thing in itself, however agreeable, as for the facility it affords me of
                    penciling in suggested thoughts, agreements, and differences of opinion,
                    or brief critical comments in general.”</quote>
                    <author>Edgar Allan Poe</author>
                </div>
                <div>
                    <head>What an edition is?</head>
                    <quote>Edition ist die erschließende Wiedergabe historischer Dokumente.</quote>
                    <quote>A scholarly edition is the critical representation of historical documents.</quote>
                    
                    <p>
                        <hi>"historical documents"</hi>: editing is concerned with documents that already
                    exist. To create a new document (which doesn't refer to something
                    preexisting) is not scholarly editing.</p>
                    
                    <p>
                        <hi>"representation"</hi>: covers (abstract) representation as well as presentation
                    (reproduction). Publishing descriptive data (e.g. metadata) without
                    reproduction is not critical editing. A catalogue, a database, a calendar is
                    not an edition.</p>

                    <p>
                        <hi>"critical / scholarly"</hi>: reproduction of documents without critical
                    examination is not scholarly editing. A facsimile is not a scholarly edition.
                    </p>
                </div>
                <div>
                    <head>Is this the same text?</head>
                    <figure>
                        <graphic url="duBellay-1.png"/>
                    </figure>
                </div>
                <div>
                    <p>A text is more than a sequence of encoded glyphs or lexical tokens
                        <list>
                            <item>it has a structure and a communicative function</item>
                            <item>it also has multiple possible readings</item>
                            <item>its meaning usually requires some level of decoding: 
                                deciphering the script, expanding abbreviations, identifying spatial and temporal context...</item>
                            <item>it can be enriched by annotation</item>
                        </list>
                    </p>

                    <p>Markup can make these things explicit.</p>
                    <p>
                        <emph>Only that which is explicit can be reliably found
                    and displayed, counted, analysed...</emph>
                    </p>
                </div>

                <div>
                <head>Why would we bother with marking up all that?</head>
                    <list>
                        <item>To allow machine-processing and querying</item>
                        <item>To facilitate re-use of the same material
                            <list>
                            <item>in different formats</item>
                            <item>in different contexts</item>
                            <item>by different users</item>
                            </list>
                        </item>
                        <item>Not to be limited to the singular view of one editor or consumer</item>
                        <item>To add value by supplying multiple annotations reflecting editor's knowledge</item>
                    </list>
                </div>

                <div>
                <head>How to make explicit (to a machine) what is implicit (to a person)?</head>
                </div>
                <div>
                <head>Procedural markup</head>
                <p>In the beginning there was procedural markup</p>

                <code>RED INK ON; print balance; RED INK OFF</code>
                
                <p>
                        <hi>Problem</hi>: Conventions give some clues about the meaning but are often ambiguous and may not be universally understood.</p>
                </div>

                <div>
                    <head>Isn't it more useful to markup what we think things are than what they
look like?</head>
                    <list>
                        <item>Presentational markup cares more about fonts and layout than
                        meaning</item>
                        <item>Descriptive markup says what things are, making the interpretation straightforward and leaves the rendition of them for a separate step</item>
                        <item>Separating the form of something from its content makes it much
                        easier to re-use</item>
                        <item>It also allows easy changes of presentation across a large number of
                        documents
                        </item>
                    </list>
                </div>

                <div>
                    <head>Again: is this the same text?</head>
                    <figure>
                        <graphic url="duBellay-1.png"/>
                    </figure>
                </div>

                <div>
                <head>Compare two markup approaches</head>
                <pre>
<code lang="xml">
&lt;pb n="4"/&gt;A MONSEI- &lt;lb/&gt;GNEUR LE REVE-
&lt;lb/&gt;rendissime Cardinal &lt;lb/&gt;du Bellay. &lt;lb/&gt;S
&lt;lb/&gt;
&lt;c rend="lettrine"&gt;V&lt;/c&gt;EU le
Personnaige, &lt;lb/&gt;que tu joues au Spec- &lt;lb/&gt;tacle de toute l'Europe...
</code>
</pre>

<pre>
<code lang="xml">

&lt;div type="dedicace"&gt;
    &lt;head&gt;A MONSEIGNEUR LE REVERENDISSIME CARDINAL DU BELLAY&lt;/head&gt;
    &lt;salute&gt;S&lt;ex&gt;ire&lt;/ex&gt;&lt;/salute&gt;
    &lt;p&gt;
    &lt;c rend="lettrine"&gt;V&lt;/c&gt;EU le Personnaige, que tu joues au Spectacle de toute
    l'Europe... &lt;/p&gt;...
&lt;/div&gt;
</code>
</pre>
    
</div>
                <div>
                <head>Markup is a scholarly activity</head>
                <list>
                    <item>The application of markup to a document is not an automatic process</item>
                    <item>In deciding what markup to apply, and how this represents the
                    original, one is undertaking the task of an editor</item>
                    <item>There is (almost) no such thing as neutral markup -- all of it involves
                    interpretation</item>
                    <item>Markup can assist in answering research questions, and the deciding
                    what markup is needed to enable such questions to be answered can
                    be a research activity in itself</item>
                    <item>Good textual encoding is never as easy or quick as people would
                    believe</item>
                    <item>Detailed document analysis is needed before encoding for the
                    resulting markup to be useful</item>
                </list>
                </div>

                <div>
                    <head>The long haul</head>
                    
                    <p>Presentation by its very nature is ephemeral: bound to
                    be modified over time or multiplied for other use scenarios</p>
                    <p>Computer stuff gets obsolete pretty quickly: a decade
                    or two or maybe 2 years if you're unlucky</p>
                    <p>Need to refurbish the interfaces, migrate the underlying
                    software and perhaps data as well is one constant in
                    long-term preservation</p>
                    <p>It’s the data source, the encoding that is of long-lasting
                    value and not the presentation</p>
                    <p>Good, formal, well documented data model will lend
                    itself to fairly easy conversion into any new solution
                    that comes</p>
                </div>


                <div>
                <head>What are our hopes and promises (when applying for funding)?</head>                
                
                <list>
                    <item>scholarly use</item>
                    <item>and RE-use</item>
                    <item>interchange</item>
                    <item>long-term preservation</item>
                </list>
                <quote>What ensures the best chance of long-term
                preservation and reuse is the concentration on openly
                licensed, quality encoding conforming as best as
                possible to standards.</quote>
                </div>

                <div>
                <head>The markup language we use must be able to ...</head>
                    <list>
                        <item>specify all the characters found</item>
                        <item>make explicit the structures perceived</item>
                        <item>represent that structure in a linear processable form</item>
                        <item>additionally supply a variety of metadata or annotations</item>
                    </list>
                    
                    <p>XML is a good fit (for the most part...)</p>
                </div>
                <div>
                    <head>Community standard: TEI</head>                
                </div>
                <div>
                    <head>The ambivalence continues</head>
                        <list>
                            <item>every project is different and we delight in flexibility and customization</item>
                            <item>yet we aim at standardization &amp; interoperability</item>
                        </list>
                        
                        <quote>
‘(...) documents worth encoding in TEI are very
different from customer letters. But not that different,
and eight out of ten probably will benefit from staying
within the confines of a well thought-out standard
schema and its surrounding processing rules. And even
the two that don’t may benefit from staying within that
standard schema as far as possible. ’ - M. Mueller</quote>
                </div>
                    
                <div>
                    <head>Text Encoding Initiative</head>
                    
                    <p>The TEI Processing Model (PM) extends the TEI ODD specification format with a processing model for
                    documents. That way intended processing for all elements can be expressed within the TEI vocubulary itself.
                    It aims at the
                    XML-savvy editor who is familiar with TEI but is not necessarily a developer. The editor knows the logical
                    structure of the text and maps it to a small set of abstract transformation functions, called
                    "behaviours". Predefined behaviours are, for example, "paragraph", "heading" or "note".</p>
                    <p>Basic styling features can be set directly within the ODD using CSS. The processing model
                    is media-agnostic: rendition styles are transparently translated into the different output media
                    types like HTML, XSL-FO, LaTeX, or ePUB.</p>
                    <p>At the same time, the processing model implements a clean separation of concerns to improve
                    the workflow between editors, designers and developers. The editor defines how elements are
                    mapped to behavior functions and specifies basic styling rules, the designer controls the
                    overall presentation of the material, and the developer concentrates on the general application
                    framework and—if necessary—supports the editor by providing custom behavior functions as
                    <ref target="#extension-modules">extension modules</ref>.</p>
                    <figure>
                        <graphic url="rahtzrationale.png"/>
                    </figure>
                    <p>A word of warning though: while the processing model was developed as part of the
                TEI Simple initiative, it is not necessarily trivial to comprehend nor "simple" regarding
                the knowledge and skill it requires.
                The goal rather was to improve workflows and interoperability by providing a
                minimal abstraction for the processing rules applied to a document. Using the processing model
                definitely simplifies the life of the developer, who often has to write a few thousand lines of code
                just to render a particular TEI document into HTML, only to repeat the same tedious process for PDF output.
                Last but not least the processing model empowers the scholary editor to create high-quality prototype
                websites from a given data set without even relying on a developer.</p>
                </div>
                <div>
                    <head>TEI Publisher</head>
                    <p>TEI Publisher does a lot more than just implement the TEI processing model. It consists
                    of the following components:</p>
                    <list type="ordered">
                        <item>
                            A set of library modules to render a TEI document into various output formats,
                            which can be imported into other applications. This corresponds to the TEI Publisher
                            library package.
                        </item>
                        <item>
                            The core application to work and experiment with various source documents and processing
                            model instances. This is the main TEI Publisher app.
                        </item>
                        <item>
                            An application generator, which takes a processing model instance and creates
                            a user interface around it, resulting in a standalone web application for a
                            certain corpus of documents. The generated application shares most of its XQuery code
                            and interface with the main TEI Publisher app, but can be customized to meet your needs.
                        </item>
                    </list>
                    <p>In a strict sense, only the first component implements the processing model specification.
                        The larger part of the toolbox deals with graphical user interface components, adding
                    pagination, navigation and search features.</p>
                </div>
                <div xml:id="quickstart">
                    <head>Getting Started</head>
                    <p>TEI Publisher is distributed as two eXist application packages, making it easy to install
                    on any local or remote eXist database instance. Just go to the dashboard, open the package
                    manager and install the TEI Publisher application package from the public repository. The 
                    TEI Publisher library package will be installed automatically as a dependency.</p>
                    <p>
                        <hi rendition="simple:bold">Note</hi>: You need at least <ref target="http://exist-db.org#download">eXist 3.0</ref> or a nightly build.</p>
                    <p>Once installed, play around with the provided documents or upload your own via the file
                    upload panel in the right sidebar. You may modify any of the supplied ODD files and see how
                    the rendering changes.</p>
                    <p>To create your own custom ODD, tailored to the data set you are working on, the general
                        procedure is as follows:</p>
                    <list>
                        <item>Create a new customization</item>
                        <item>Overwrite the standard processing model rules for selected TEI elements or add
                        model rules for elements not handled by the standard ODD.</item>
                        <item>Test your modifications by applying the ODD and rendering a few documents.</item>
                    </list>
                    <p>The steps will be described in detail in the following sections.</p>
                    <div>
                        <head>Create a new customization</head>
                        <p>Create a new customization by entering a name and clicking "Create" at the bottom
                            of the right sidebar panel listing the available ODDs. Reload the page to see
                            the new ODD appear in the list.</p>
                        <p>Open the created ODD using the "source" button. This will create a new browser tab
                        showing the editor which is part of eXist, called "eXide". The ODD will be loaded into
                        it.</p>
                        <p>As you can see, the ODD is nearly empty, containing just boilerplate code. However,
                        it imports the standard <code>teipublisher.odd</code> within the <code>schemaSpec</code>
                        element:</p>
                        <code lang="xml">&lt;schemaSpec ident="myteisimple" start="TEI teiCorpus" source="teipublisher.odd"&gt;</code>
                        <p>This means your new ODD extends the standard <code>teipublisher.odd</code>, which
                        provides useful defaults for the TEI core elements. In general, most of those defaults
                        should be ok and you only need to overwrite a hand full of selected mappings within your
                        own ODD.</p>
                        <figure xml:id="create-odd" type="animated">
                            <head>Create a custom ODD</head>
                            <graphic url="CreateODD.gif"/>
                        </figure>
                    </div>
                    <div>
                        <head>Modify the ODD</head>
                        <p>Now we created a custom ODD, we can make a first modification. We'll use the
                            <title>Letter #6 from Robert Graves to William Graves</title> as an example.
                            Rendered through the standard <code>teipublisher.odd</code>, it is definitely missing
                            some styling to look more like a letter. For example, we may want to move the
                            <gi>dateline</gi> in the <gi>opener</gi> to the right and get rid of the <gi>pb</gi>
                            label which currently sits there.
                        </p>
                        <p>We thus need to overwrite the processing model rules for <gi>dateline</gi> and <gi>opener</gi>.
                        The easiest way to do this is to:</p>
                        <list>
                            <item>open the standard teipublisher.odd and search for an existing <gi>elementSpec</gi>
                                with <att>ident</att>=<val>"dateline"</val>.</item>
                            <item>if there is an <gi>elementSpec</gi> already, just copy it</item>
                            <item>paste the <gi>elementSpec</gi> into the new ODD and modify it</item>
                        </list>
                        <p>If there's no <gi>elementSpec</gi> for the element in <code>teipublisher.odd</code>, you have to
                        create a new <gi>elementSpec</gi> in your ODD, using <att>mode</att>=<val>"add"</val> instead of
                            <att>mode</att>=<val>"change"</val>.</p>
                        <p>The <gi>elementSpec</gi> copied from <code>teipublisher.odd</code> looks like this:</p>
                        <code lang="xml">&lt;elementSpec mode="change" ident="dateline"&gt;
    &lt;model behaviour="block"/&gt;
&lt;/elementSpec&gt;</code>
                        <p>To make the text right-aligned, we add a <gi>outputRendition</gi>:</p>
                        <code lang="xml">&lt;elementSpec mode="change" ident="dateline"&gt;
    &lt;model behaviour="block"&gt;
        &lt;outputRendition&gt;text-align: right;&lt;/outputRendition&gt;
    &lt;/model&gt;
&lt;/elementSpec&gt;</code>
                        <p>We also want to hide the <gi>pb</gi> label, so we add another <gi>elementSpec</gi>:</p>
                        <code lang="xml">&lt;elementSpec mode="change" ident="pb"&gt;
    &lt;model behaviour="omit"/&gt;
&lt;/elementSpec&gt;</code>
                        <p>To test the changes, go back to the main page of the app, select the new ODD and click on
                        "Regenerate", then browse to the letter and view the result. In fact, the "regenerate" step is
                        not absolutely necessary as the library will usually recognize the change to the ODD when
                        you try to view the letter and regenerate automatically. However, if you made mistakes in the ODD,
                        the regenerate will just fail silently. So during development, it is advisable to regenerate
                        manually.</p>
                        <figure xml:id="edit-odd" type="animated">
                            <head>Move dateline to right and hide pb</head>
                            <graphic url="EditODD.gif"/>
                        </figure>
                    </div>
                </div>
                <div>
                    <head>Processing Model syntax</head>
                    <div>
                        <head>
                            <gi>model</gi> element</head>
                        <p>
                            <gi>model</gi> element is primarily used to document intended processing for a given element.
                    One or more of these elements may appear directly within an <gi>elementSpec</gi> element specification to
                    define the processing anticipated for that element. Where multiple <gi>model</gi> elements appear, they are
                    understood to document mutually exclusive processing scenarios, possibly for different outputs or
                    applicable in different contexts.
                    </p>
                        <p>A processing model defines on an abstract level how a given element may be transformed to produce
                    one or more outputs.
                    The model is expressed in terms of <term>behaviours</term> and their <term>parameters</term>, using high-level
                    formatting concepts, such as <soCalled>block</soCalled>, <soCalled>inline</soCalled>, <soCalled>note</soCalled>
                    or <soCalled>heading</soCalled>. A processing model is thus a template description, used to generate the code
                    needed by the publishing application to process the source document into required output.
                    </p>
                        <p>
                    Example below depicts a situation where a single model is defined for <gi>app</gi> element. As no @predicate
                    or @output are specified, this model applies for all contexts in which <gi>app</gi> may appear and all possible
                    outputs. Thus for all <gi>app</gi> elements they will be transformed into inline chunks of text containing only
                    contents of <gi>app</gi>'s <gi>lem</gi> child and omitting any possible <gi>rdg</gi> children.
                    <pre>
                                <code lang="xml">&lt;elementSpec mode="change" ident="app"&gt;
 &lt;model behaviour="inline"&gt;
  &lt;param name="content"&gt;lem&lt;/param&gt;
 &lt;/model&gt;
&lt;/elementSpec&gt;
</code>
                            </pre>
                        </p>
                    </div>
                    <div>
                        <head>
                            <gi>model</gi> children and attributes:</head>
                        <p>
                            <list>
                                <item>
                                    <att>predicate</att>: the condition under which this model applies, given as an XPath Predicate Expression</item>
                                <item>
                                    <att>behaviour</att>: names the function which this processing model uses in order to produce output; possible values include: alternate, block, figure, heading, inline, link, list, note, paragraph</item>
                                <item>
                                    <att>output</att>: identifier of the intended output for which this model applies; applies to all output if no @output is present on a <gi>model</gi>
                                </item>
                                <item>
                                    <att>useSourceRendition</att>: whether to obey any rendition attribute which is present in the source document</item>
                                <item>
                                    <att>cssClass</att>: one or more CSS class names which should be added to the
                                    resulting output element where applicable</item>
                                <item>
                                    <gi>param</gi>: allows to pass parameters to @behaviour function; parameters available
                            depend on the behaviour in question; when parameters are not explicitly passed, default values
                            for those are assumed; all behaviour functions use current	element as default content</item>
                                <item>
                                    <gi>outputRendition</gi>: supplies information about the desired output rendition in CSS; its attribute @scope provides a way of defining ‘pseudo-elements’ eg: first-line, first-letter, before, after
                            </item>
                            </list>
                        </p>
                        <p>
                    Simple model explicitly specifying content parameter: for <gi>app</gi> entries only content of its <gi>lem</gi> child is to be displayed (as an inline chunk of text)
                    <pre>
                                <code lang="xml">&lt;elementSpec mode="change" ident="app"&gt;
 &lt;model behaviour="inline"&gt;
  &lt;param name="content"&gt;lem&lt;/param&gt;
 &lt;/model&gt;
&lt;/elementSpec&gt;
</code>
                            </pre>
                        </p>
                        <p>
                    Model specifying output rendition: contents of <gi>ex</gi> elements are to be displayed in italic and wrapped in parentheses
					<pre>
                                <code lang="xml">&lt;elementSpec mode="change" ident="ex"&gt;
 &lt;model behaviour="inline"&gt;
   &lt;outputRendition&gt;font-style: italic;&lt;/outputRendition&gt;
   &lt;outputRendition scope="before"&gt;content:"(";&lt;/outputRendition&gt;
   &lt;outputRendition scope="after"&gt;content:")";&lt;/outputRendition&gt;
 &lt;/model&gt;
&lt;/elementSpec&gt;</code>
                            </pre>
                        </p>
                        <p>Sometimes different processing models are required for the same element in different contexts.
                    For example, we may wish to process the <gi>quote</gi> element as an inline italic element when it
                    appears inside a <gi>p</gi> element, but as an indented block when it appears elsewhere.
                    To achieve this, we need to change the specification for the <gi>quote</gi> element to include
                    two <gi>model</gi> elements as follows:
					<pre>
                                <code lang="xml">&lt;elementSpec mode="change" ident="quote"&gt;
    &lt;model predicate="ancestor::p" behaviour="inline"&gt;
        &lt;outputRendition&gt;font-style: italic;&lt;/outputRendition&gt;
    &lt;/model&gt;
    &lt;model behaviour="block"&gt;
        &lt;outputRendition&gt;left-margin: 2em;&lt;/outputRendition&gt;
    &lt;/model&gt;
&lt;/elementSpec&gt;
</code>
                            </pre>
           The first processing model will be used only for <gi>quote</gi> elements which match the XPath
           expression given as value for the <att>predicate</att> attribute.
           Other element occurrences will use the second processing model.
            Set of multiple <gi>model</gi> statements is regarded as an alternation and only the
            first model with <att>predicate</att> matching current context is applied

<!--
           					<pre>
					<code><elementSpec mode="change" ident="choice">
	<model output="plain" predicate="sic and corr"  behaviour="inline">
		<param name="content">corr[1]</param>
	</model>
	<model output="plain" predicate="abbr and expan" behaviour="inline">
		<param name="content">expan[1]</param>
	</model>
	<model output="plain" predicate="orig and reg" behaviour="inline">
		<param name="content">reg[1]</param>
	</model>
	<model predicate="sic and corr" behaviour="alternate">
		<param name="default">corr[1]</param>
		<param name="alternate">sic[1]</param>
	</model>
	<model predicate="abbr and expan" behaviour="alternate">
		<param name="default">expan[1]</param>
		<param name="alternate">abbr[1]</param>
	</model>
	<model predicate="orig and reg" behaviour="alternate">
		<param name="default">reg[1]</param>
		<param name="alternate">orig[1]</param>
	</model>
</elementSpec></code></pre>
-->
                        </p>
                    </div>
                    <div>
                        <head>
                            <gi>modelSequence</gi> and <gi>modelGrp</gi>
                        </head>
                        <p>
                        Summary of elements that can be used to document one or more processing models for a given element:
                        <list>
                                <item>
                                    <gi>model</gi> describes the processing intended for a specific context
                            </item>
                                <item>
                                    <gi>modelSequence</gi> (sequence of processing models) a group of model elements
                                documenting intended processing models for this element, to be acted upon in sequence
                            </item>
                                <item>
                                    <gi>modelGrp</gi> (processing model group) a group of model elements documenting
                                intended processing models for this element
                            </item>
                            </list>
                        </p>
                        <p>
                    The
                    <gi>modelGrp</gi> element may be used to group alternative <gi>model</gi> elements intended for
                    a single kind of output. The <gi>modelSequence</gi> element is provided for the case where a sequence
                    of models is to be processed, functioning as a single unit. Common use case would be to use modelSequence to
                    generate table of contents along with the reading text as shown in the example below:
					<pre>
                                <code lang="xml">&lt;elementSpec mode="change" ident="body"&gt;
&lt;modelSequence&gt;
    &lt;model behaviour="index"&gt;
        &lt;param name="type"&gt;'toc'&lt;/param&gt;
    &lt;/model&gt;
    &lt;model behaviour="block"/&gt;
&lt;/modelSequence&gt;
&lt;/elementSpec&gt;
</code>
                            </pre>
                        </p>
                    </div>
                    <div>
                        <head>Behaviours</head>
                        <p>Most of the processing complexity is hidden behind behaviour functions which were designed
                to cover majority of commonly occurring processing tasks. Function names are wherever possible
                based on commonly used terms such as 'inline', 'block', 'note' or 'link'.</p>
                        <p>Behaviour functions accept a range of parameters, depending on the function in question. Where these
                parameters are left unspecified in the <gi>model</gi>, default values are used.</p>
                        <div>
                            <head>Available Behaviours</head>
                            <p>All behaviour functions take at least one parameter: <code>content</code>. It
                                will be added by default unless specified and contains
                                the content of the currently processed node. You may change this by explicitely setting
                                a <code>content</code> parameter inside the model.</p>
                            <p>In the parameter lists below we skip the <code>content</code> parameter as it is available for
                                every behaviour.</p>
                            <list type="gloss">
                                <label>alternate</label>
                                <item>
                                    <p>Display alternating elements for displaying the preferred version and an
                                        alternative, both at once or by some method of toggling between the two.
                                        The concrete implementation depends on the output format.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>default</cell>
                                            <cell>the content to display by default</cell>
                                        </row>
                                        <row>
                                            <cell>alternate</cell>
                                            <cell>alternate content</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>anchor</label>
                                <item>
                                    <p>Create an anchor to which you can link, identified by the given id.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>id</cell>
                                            <cell>the id</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>block</label>
                                <item>
                                    <p>Create a block structure, usually a div in HTML or fo:block in fo.</p>
                                </item>
                                <label>body</label>
                                <item>
                                    <p>Create the body of a document. In HTML this will result in a &lt;body&gt; tag.</p>
                                </item>
                                <label>break</label>
                                <item>
                                    <p>Create a line, column, or page break according to type.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>type</cell>
                                            <cell>e.g. "page", "column", "line"</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>cell</label>
                                <item>
                                    <p>Create a table cell. If the @cols or @rows attribute is specified, the cell may span several columns/rows.</p>
                                </item>
                                <label>cit</label>
                                <item>
                                    <p>Show a citation, with an indication of the source.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>source</cell>
                                            <cell>the citation source</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>document</label>
                                <item>
                                    <p>Start a new output document.</p>
                                </item>
                                <label>figure</label>
                                <item>
                                    <p>Make a figure with provided title argument as caption</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>title</cell>
                                            <cell>a caption</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>graphic</label>
                                <item>
                                    <p>Display the graphic retrieved from the given url.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>url</cell>
                                            <cell>the url to load the graphic from</cell>
                                        </row>
                                        <row>
                                            <cell>width</cell>
                                            <cell>the width of the graphic, e.g. "300px", "50%" ...</cell>
                                        </row>
                                        <row>
                                            <cell>height</cell>
                                            <cell>the height of the graphic, e.g. "300px", "50%" ...</cell>
                                        </row>
                                        <row>
                                            <cell>scale</cell>
                                            <cell>a scaling factor to apply. If specified, width and height will be output as percentage based on the scaling factor, which
                                                should be a number between 0 and 1.</cell>
                                        </row>
                                        <row>
                                            <cell>title</cell>
                                            <cell>a title for the graphics element. Usually not shown directly.</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>heading</label>
                                <item>
                                    <p>Creates a heading.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>level</cell>
                                            <cell>the structural level of this heading. In HTML mode, this translates to &lt;h1&gt;, &lt;h2&gt; etc.</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>inline</label>
                                <item>
                                    <p>Outputs an inline element.</p>
                                </item>
                                <label>link</label>
                                <item>
                                    <p>Create a hyperlink.</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>uri</cell>
                                            <cell>the link url</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>list</label>
                                <item>
                                    <p>Creates an ordered or unordered list, depending on the type attribute (e.g. <code>type="ordered"</code>). If a label
                                        is present before each item, a description list is output instead, using the label as definition term.</p>
                                </item>
                                <label>listItem</label>
                                <item>
                                    <p>Outputs an item in a list.</p>
                                </item>
                                <label>metadata</label>
                                <item>
                                    <p>Outputs a metadata section, e.g. a &lt;head&gt; in HTML.</p>
                                </item>
                                <label>note</label>
                                <item>
                                    <p>create a note, often out of line, depending
                                        on the value of <term>place</term>; could be "margin", "footnote", "endnote", "inline"</p>
                                    <table>
                                        <row role="label">
                                            <cell>Parameter</cell>
                                            <cell>Description</cell>
                                        </row>
                                        <row>
                                            <cell>place</cell>
                                            <cell>defines the placement of the note, e.g. "margin", "footnote" ...</cell>
                                        </row>
                                        <row>
                                            <cell>label</cell>
                                            <cell>the label to use for the footnote reference, usually a number.</cell>
                                        </row>
                                    </table>
                                </item>
                                <label>omit</label>
                                <item>
                                    Do nothing, skip this element, do not process children
                                </item>
                                <label>paragraph</label>
                                <item>
                                    Create a paragraph.
                                </item>
                                <label>row</label>
                                <item>
                                    Create a table row.
                                </item>
                                <label>section</label>
                                <item>Create a new section in the output document. In HTML mode, this translates to a &lt;section&gt; element being output.</item>
                                <label>table</label>
                                <item>Create a table.</item>
                                <label>text</label>
                                <item>Output literal text.</item>
                                <label>title</label>
                                <item>Output the document title. In HTML mode, this creates a &lt;title&gt; element. In LaTeX, it adds the title to the document metadata.</item>
                            </list>
                        </div>
                    </div>
                    <div>
                        <head>Output formatting options</head><!--
<p>This component of an element specification describes the rendering or appearance intended for all occurrences of the element in a specified context for a specified type of output. The <gi>rendition</gi> element, by contrast, describes the actual rendering or appearance of all occurrences of the specified element in a source document. The <att>useSourceRendition</att> attribute may however be used to indicate that formatting information provided by a <gi>rendition</gi> element is to be  combined with any provided by an <gi>outputRendition</gi> element.</p>
<p>It is strongly recommended that the W3C Cascading Stylesheet language (CSS2 or later) be used to express the required formatting information.</p>
-->
                        <p>
The intended rendering for a particular behaviour of a processing model may be documented in one or all of the three following ways. Firstly, the <att>cssClass</att> attribute may be used to specify the name of a CSS style in some associated CSS stylesheet which is to be applied to each occurrence of a specified element found (in a given context, for a specified output). Secondly, the attribute <att>useSourceRendition</att> may be used to indicate that the rendition specified in the source document should be applied. Thirdly, the styling to be applied may be specified explicitly as content of a child <gi>outputRendition</gi> element.
</p>
                        <p>
When more than one of these options is used, they are understood to be combined in accordance with the rules for multiple declaration of the styling language used.
</p>
                        <p>
It is strongly recommended that use <gi>outputRendition</gi> should be limited to strictly editorial decisions, such as 'conjectures are to be displayed in square brackets' and not as means to record all typesetting and layout specific design choices.</p>
                        <p>The processing model library translates the CSS styles into the target media format. Restrictions
                            apply due to differences between the output formats. Not all CSS properties are supported for
                        every format. Please refer to the section on <ref target="#output-media">Output media settings</ref>
                        for further information.</p>
                    </div>
                    <div>
                        <head>Extensions to the Processing Model Specification</head>
                        <div>
                            <head>XQuery Instead of XPath</head>
                            <p>The implementation directly translates processing model instructions into an XQuery 3.1 module by generating executable
                                XQuery code. This is straightforward as the resulting XQuery will closely resemble the specification in the ODD, thus being easy
                                to debug. It also leads to very efficient code, which is as fast or even faster as a hand-written, optimized transformation.</p>
                            <p>As a welcome side effect, any valid XQuery expression might be used wherever the spec expects an XPath expression, e.g. in predicates
                                or parameters. For example, one can define variables inside a parameter using a standard XQuery
                                <code>let $x := ... return ...</code>.</p>
                        </div>
                        <div>
                            <head>External Parameters</head>
                            <p>The script calling the processing model may pass external parameters into the ODD. They will be available in the
                                variable <ident>$parameters</ident>, which is an XQuery map. Access parameters using the XQuery lookup operator.</p>
                            <p>For example, one can use this feature to control how specific parts of the document are output, without having to
                                define a separate output mode, which would result in much more code. Below we display a short header for the document,
                                but only if the parameter "header" is set to "short":</p>
                            <code lang="xquery">&lt;elementSpec mode="change" ident="fileDesc"&gt;
    &lt;modelSequence predicate="$parameters?header='short'"&gt;
        &lt;model behaviour="block" cssClass="header-short"&gt;
            &lt;param name="content"&gt;titleStmt&lt;/param&gt;
        &lt;/model&gt;
        &lt;model behaviour="block" cssClass="header-short"&gt;
            &lt;param name="content"&gt;editionStmt&lt;/param&gt;
        &lt;/model&gt;
    &lt;/modelSequence&gt;
    ...
 &lt;/elementSpec&gt;</code>
                        </div>
                        <div>
                            <head>Define Additional CSS Classes</head>
                            <p>The processing model automatically generates class names for all elements. However, they just use the name of the TEI element
                            suffixed with a number corresponding to the position of the generating <gi>model</gi> within the <gi>elementSpec</gi>. The
                            class names are thus subject to change whenever one modifies the ODD. Also, in most projects, a web designer
                            will create a design before the developer writes the ODD. He thus expects the class names generated from the ODD to correspond
                            to those in a design template, not vice versa.</p>
                            <p>Our implementation thus adds a possibility to explicitely specify class names inside the <gi>model</gi>. Those class names will
                                be added to the automatically generated ones. There are two ways to define CSS classes:</p>
                            <list type="gloss">
                                <item>via the <att>cssClass</att> attribute: specifies a whitespace separated list of static class names to be appended to
                                the output element</item>
                                <item>via the <gi>cssClass</gi> child element of a <gi>model</gi>: the text content of this element is interpreted as an
                                    XPath/XQuery expression. The evaluation result of this expression will be cast to a sequence of strings which will be added to
                                    the the output element. This is useful if the css class depends on the dynamic context - which is often the case in css frameworks.</item>
                            </list>
                        </div>
                        <div>
                            <head>Nested Models</head>
                            <p>According to the current specs, the processing model only allows to map one TEI input element to exactly one output element. Sometimes
                                this is not sufficient as there might not be a direct one-to-one correspondence. For example, one may want to wrap a block around a sequence
                                of elements or a link around a heading.</p>
                            <p>The implementation thus supports nesting of <gi>model</gi>, <gi>modelSequence</gi> or <gi>modelGrp</gi> elements inside
                                another <gi>model</gi>.  If no parameters are specified for the wrapping <gi>model</gi>, the nested elements may directly appear as
                                child elements and will be applied to the content of the outer behaviour before it is evaluated (replacing the <ident>$content</ident>
                                parameter). Otherwise, parameters in <gi>param</gi> elements may also contain nested elements, whose evaluation result will become the
                                value of the parameter.</p>
                            <p>Note that the context node doesn't change for nested <gi>model</gi> and <gi>modelSequence</gi> elements. It will always contain the
                                node processed by the outer <gi>model</gi>.</p>
                        </div>
                    </div>
                    <div>
                        <head>Best Practice Recommendations</head>
                        <list>
                            <item>
                                <p>While the ODD may describe the rendition of an element using CSS, this
                                should be used with care: styling imposed by the ODD should be generic
                            and not interfere with application-specific design choices.</p>
                                <p>For example, defining a font family for a certain element in the ODD
                                makes it difficult for web designers to set the font via an external
                                stylesheet.</p>
                                <p>The HTML as well as the FO output function libraries provide ways to
                                customize the styling through additional, user-supplied CSS.</p>
                            </item>
                        </list>
                    </div>
                </div>
                <div>
                    <head>Configure the ODD via processing instructions</head>
                    <p>Sometimes you want to use a different ODD for a specific TEI document. Before displaying
                        a document, TEI publisher will check if a processing instruction exists at the start of the document,
                        telling it which ODD to use (along with other configuration parameters). For example, the following
                        processing instruction associates the document with the <code>dta.odd</code> ODD and switches
                        to a page-by-page display (along TEI page break boundaries):</p>
                    <code lang="xml">&lt;?teipublisher view="page" odd="dta.odd"?&gt;</code>
                    <p>If your document does not have page breaks or you want to display entire divisions instead, there are
                        two additional settings which control the amount of content displayed at a time:</p>
                    <code lang="xml">&lt;?teipublisher depth="2" fill="6" odd="dta.odd"&gt;</code>
                    <list type="gloss">
                        <label>odd</label>
                        <item>The ODD file to use for rendering the document</item>
                        <label>view</label>
                        <item>Default view to show when browsing the document. Supported values are
                            <gi>div</gi> or <gi>page</gi>.</item>
                        <label>depth</label>
                        <item>When viewing entire divisions, the software tries to determine if it should
                        show child divisions in separate pages or include them with the current div. <gi>depth</gi> indicates the
                        nesting level up to which divisions should be shown separately. So setting it to "2" will result in
                        divisions on level 3 or greater to be shown together with their enclosing div.</item>
                        <label>fill</label>
                        <item>If child divisions appear on separate pages, it may happen that the enclosing div contains just a heading
                        or a single line of text. In this case, the algorithm will try to fill the page by showing the first child
                        division as well. The <gi>fill</gi> paramter defines the number of elements which should at least be present
                        on a page. If not, the software tries to fill it up.</item>
                    </list>
                </div>
                <div xml:id="appgen">
                    <head>Using the App Generator</head>
                    <p>The App Generator takes an ODD file and generates a complete, standalone application
                        out of it, including features like a simple search facility. Click on "App Generator"
                        in the menu bar and fill out the form. The following form fields are important:</p>
                    <list type="gloss">
                        <label>Name</label>
                        <item>This is the main identifier for you app and should be a globally unique URI. It does not
                            need to correspond to any existing web site.</item>
                        <label>Abbreviation</label>
                        <item>The abbreviation will be used as the name of the root collection of your app. It should
                        be unique within one database instance.</item>
                        <label>Data Collection</label>
                        <item>Only specify something here if you have existing data inside the database or if you want to
                        ship the data set as part of a second, separate app. In all other cases, leave this field empty.</item>
                        <label>User/Password</label>
                        <item>The user account which will own all application files. For security reasons, it is advisable
                            to create a new account for every app.</item>
                    </list>
                    <p>Once you created the new application, log into it using the account details you provided. You can then
                    upload XML documents using the upload panel in the right sidebar.</p>
                    <figure xml:id="create-app" type="animated">
                        <head>Create an App</head>
                        <graphic url="CreateApp.gif"/>
                    </figure>
                    <div>
                        <head>Modifying the App</head>
                        <p>When you are logged in, the "Admin" menu in the top navbar provides various links to further
                        extend your app:</p>
                        <list type="gloss">
                            <label>Recompile ODD</label>
                            <item>After changing the application's ODD, click here to update the app.</item>
                            <label>Update Document Metadata Index</label>
                            <item>The application maintains a separate index of titles and authors, which is used
                                to filter the list of documents shown on the landing page. This index is not
                                refreshed automatically, so you need to click this menu entry once after uploading
                                data.</item>
                            <label>Edit ODD</label>
                            <item>Opens the application's ODD in eXide for editing.</item>
                            <label>Edit Configuration</label>
                            <item>Edit the main configuration parameters of the app. Configuration is done via a set of variables
                            in an XQuery module.</item>
                            <label>Edit Styles</label>
                            <item>Opens the main LESS stylesheet where you can change colors, fonts etc.</item>
                        </list>
                        <div>
                            <head>Generated Code Overview</head>
                            
                            <div>
                                <head>XQuery Code</head>
                                <p>The generated app shares most of its XQuery libraries with the main TEI Publisher app. A copy of those is included
                                    in the <code>lib/</code> collection of the generated app and should not be modified! This way you can later update
                                    the libraries to a newer TEI Publisher release without breaking your app.</p>
                                <p>Including the libraries in the generated app creates some redundancy, but we chose to accept this trade off to make
                                    it easier to view and modify everything relevant to the app.</p>
                                <p>The following core XQuery modules in every app are safe to be modified:</p>
                                <list type="gloss">
                                    <label>config.xqm</label>
                                    <item>The main configuration file for the app. It contains a number of parameters which control things like:
                                        how should the TEI content be split into viewable chunks?</item>
                                    <label>pm-config.xql</label>
                                    <item>This file defines the functions to be called for rendering TEI content via the processing model.
                                        It imports the modules generated from your ODD and assigns them to variables as function pointers. 
                                        This approach is much more efficient than the dynamic lookups done by the main TEI Publisher app. It has been
                                        production tested on large web sites. The downside is that the connection to the ODD is hard-coded.
                                        If you need to switch between different ODDs, you would need to change pm-config.xql and insert
                                        a proper switch there depending on external parameters.</item>
                                    <label>index.xql</label>
                                    <item>Is used to generate indexes on document metadata like author, title etc. It is called when you click
                                        "Update Metadata Index" in the admin menu.</item>
                                    <label>autocomplete.xql</label>
                                    <item>Contains the queries used to provide autocomplete suggestions when the user types into a search box.
                                        If you need different indexes for your app, you may also have to modify those queries.</item>
                                    <label>app.xql</label>
                                    <item>Add your own HTML templating functions here. This is basically where the application logic of your app should go.</item>
                                </list>
                            </div>
                            <div>
                                <head>Styling</head>
                                <p>All of the app styling is done via a set of modularized less stylesheets, residing in <code>resources/css</code>. The main
                                file is <code>style.less</code>, which defines a number of core parameters. Ideally this should be the only file you ever need
                                to modify. Limiting yourself to <code>style.less</code> will make later updates much easier.</p>
                            </div>
                        </div>
                    </div>
                    <div>
                        <head>Exporting the Finished App</head>
                        <p>To save your finished application or exchange it with other people, you need to save it as an
                            application archive. Application archives use a standardized format: the resulting .xar file
                            can be uploaded to any eXist instance via the dashboard and the package manager will take
                            care of the deployment.</p>
                        <p>There are two ways to create a .xar file from your application:</p>
                        <list type="ordered">
                            <item>Use the "Application"/"Download App" menu entry in eXide to directly download a .xar</item>
                            <item>Synchronize the application to a directory on disk via "Application"/"Synchronize" in
                                eXide</item>
                        </list>
                        <p>The second approach is the recommended one. It requires that
                            you have access to the file system of the server running eXist though, so it's usually only
                            an option if you run your own eXist. The synchronize steps in detail:</p>
                        <list>
                            <item>Prerequisite: you need to have the <ref target="http://ant.apache.org/">Apache Ant</ref>
                            build tool installed.</item>
                            <item>Open one resource belonging to your application in eXide. It doesn't matter which one.
                            The only important thing is that the name of your app is displayed next to "Current app:" on
                            the top right of the eXide window. If this is not the case, stop and check again!</item>
                            <item>Click "Application"/"Synchronize" in the menu. It opens up a dialog with two fields:
                                "Start time" and "Target directory". When you synchronize the first time, empty the "Start
                                time" field. Enter a valid, absolute directory path on your server machine into "Target
                                directory".</item>
                            <item>Click the "Synchronize" button. This may take a moment, but you should see a list of
                            written files at the bottom of the dialog afterwards.</item>
                            <item>Change to the directory you specified for synchronize.</item>
                            <item>Calling "ant" inside the directory should create a fresh .xar file in the build/
                                subdirectory.</item>
                        </list>
                        <p>Note: for security reasons, the password you entered when creating the app is not stored in
                            the database, so it cannot be synced to disk. To restore a password for your app, you thus need
                            to edit the <code>repo.xml</code> file in the directory and add a <att>password</att> attribute to
                            the <gi>permissions</gi> element.</p>
                        <figure xml:id="sync" type="animated">
                            <head>Export an App</head>
                            <graphic url="Sync.gif"/>
                        </figure>
                    </div>
                    <div>
                        <head>Troubleshooting</head>
                        <p>Sometimes changes you make to the ODD might cause errors in the app, e.g. if a predicate expression
                            is wrong. The recompile step tries to check this and if it reports an error, you should fix it
                            immediately.</p>
                        <p>If you still happen to reload the page, you might run into an error page. In this case, go to
                            eXide and open the XQuery file <code>modules/regenerate.xql</code>. This is the XQuery which
                            would be called by clicking on the "Recompile ODD" menu entry. Execute the query once by
                            clicking the "Eval" button in eXide.</p>
                        <p>The same applies if you updated the core TEI Publisher library package: your application may
                        suddenly fail with XQuery errors. Just follow the steps above to recover.</p>
                    </div>
                </div>
                <div xml:id="output-media">
                    <head>Output Media Settings</head>
                    <p>The library supports various output media formats and translates styles into the corresponding format. Currently the following output modes
                        are supported and can be used in the <code>@output</code> attribute:</p>
                    <list type="gloss">
                        <label>web</label>
                        <item>Produces HTML output</item>
                        <label>fo</label>
                        <item>Generates a PDF via XSL:FO</item>
                        <label>latex</label>
                        <item>Creates a PDF via LaTeX</item>
                        <label>print</label>
                        <item>An alias which applies to both: fo and latex modes.</item>
                        <label>epub</label>
                        <item>Similar to web concerning features, but targetted at epub documents</item>
                    </list>
                    <p>The quality of the generated output may vary a lot for the fo and latex modes, depending on the type of input document. The following
                        section provides more details on the configuration of the FO output option:</p>
                    <div>
                        <head>FO Output</head>
                        <p>When generating XSL:FO output, the implementation tries to translate the CSS rules
                            specified for renditions into the corresponding XSL:FO formatting properties.
                            Not all CSS properties are recognized or can be mapped to FO properties. Unknown properties defined in a rendition
                            will be ignored.</p>
                        <p>The default rendering for headings, paragraphs and the like is defined by a separate
                            CSS file. The implementation merges those defaults with the custom renditions given
                            in the ODD.</p>
                        <p>The library searches for default CSS styles in a file named
                            <code>&lt;odd-name&gt;.fo.css</code> inside the specified output collection
                            (in which the generated XQuery files are stored). The style definitions are copied literally into attributes on
                            the output XSL:FO elements, so any property which is a valid attribute for the corresponding element
                            may be used. For example, <code>teipublisher.fo.css</code> contains:</p>
                        <code lang="css">.tei-text {
    font-family: "Junicode";
    hyphenate: true;
}
.tei-floatingText {
    padding: 6pt;
}
.tei-p {
    text-align: justify;
}</code>
                        <p>Every XSL:FO document needs a master layout and a page sequence definition. Because those tend to be rather verbose as they
                        include things like page margins etc., they are read from two XML files:</p>
                        <list type="gloss">
                            <label>master.fo.xml</label>
                            <item>Contains the layout master set</item>
                            <label>page-sequence.fo.xml</label>
                            <item>Defines the main page sequence</item>
                        </list>
                        <p>The mechanisms for configuring FO output are still very much under development and we welcome suggestions by users.</p>
                    </div>
                    <div>
                        <head>LaTeX Output</head>
                        <p>The latex output mode produces good results for longer texts which fit well into the pre-defined LaTeX environments. The number
                            of supported CSS properties is limited though:</p>
                        <list>
                            <item>font-weight</item>
                            <item>font-style</item>
                            <item>font-variant</item>
                            <item>font-size</item>
                            <item>color</item>
                            <item>text-decoration</item>
                            <item>text-align</item>
                            <item>text-indent</item>
                        </list>
                        <p>We're looking for contributors familiar with TeX to support more properties.</p>
                    </div>
                </div>
                <div xml:id="extension-modules">
                    <head>Extension Modules</head>
                    <p>Where possible, developers should stick to the standard processing model functions for
                    defining behaviours. However, there might be situations in which one has to generate
                    a specific type of output, which is not handled by the default function module. To facilitate this,
                    the implementation allows additional extension modules to be configured:</p>
                    <p>Configuration is done via an XML file which should reside in the same collection as the source ODD files.
                        It contains a series of <tag>output</tag> elements, each listing the extension modules to be loaded
                        for the given output mode. Each definition may optionally be limited to a specific ODD, whose name
                        is specified in the <att>odd</att> attribute.</p>
                    <code lang="xml">&lt;modules&gt;
    &lt;!-- General fo extension functions --&gt;
    &lt;output mode="print"&gt;
        &lt;module mode="print" uri="http://www.tei-c.org/tei-simple/xquery/ext-fo" prefix="ext-fo" at="../modules/ext-fo.xql"/&gt;
    &lt;/output&gt;
    &lt;!-- Special web configuration for the documentation (to handle &lt;code&gt;) --&gt;
    &lt;output mode="web" odd="documentation"&gt;
        &lt;module mode="html" uri="http://www.tei-c.org/tei-simple/xquery/ext-html" prefix="ext-html" at="../modules/ext-html.xql"/&gt;
    &lt;/output&gt;
&lt;/modules&gt;</code>
                    <p>Whenever the library tries to locate a processing model function
                    for a given behaviour, it will <hi rendition="simple:bold">first</hi> check any extension
                    module it knows to see if it contains a matching function. One can thus
                        <hi rendition="simple:bold">overwrite</hi> the default
                    functions as well as define new ones.</p>
                    <p>To be recognized by the library, an extension function needs to accept at least
                    4 default arguments, plus any number of custom parameters (to be passed in the
                    behaviour attribute). The processing model implementation tries to fill each custom parameter
                    with a corresponding value by looking through the <tag>param</tag> tags in the ODD to find
                        one with a name matching the variable name. If no matching parameter can be found, the
                        function argument will be set to the empty sequence<note place="bottom">You should not enforce a type
                        or cardinality for any of the custom parameters as this may lead to unexpected errors. The parameters
                        may always be empty or contain more than one item.</note>. The default <code>$content</code>
                        will always be filled, except for empty elements.</p>
                    <p>For example, our extension module <code>ext-html.xql</code> may look as follows:</p>
                    <code lang="xquery">xquery version "3.1";

(:~
: Non-standard extension functions, mainly used for the documentation.
:)
module namespace pmf="http://www.tei-c.org/tei-simple/xquery/ext-html";

declare namespace tei="http://www.tei-c.org/ns/1.0";

declare function pmf:code($config as map(*), $node as element(),
    $class as xs:string, $content as node()*, $lang as item()?) {
    &lt;pre class="sourcecode" data-language="{if ($lang) then $lang else 'xquery'}"&gt;
    {$config?apply($config, $content/node())}
    &lt;/pre&gt;
};</code>
                    <p>It defines one function, <code>pmf:code</code>, which can be called from the ODD as follows:</p>
                    <code lang="xml">&lt;model behaviour="code"&gt;
    &lt;param name="lang"&gt;@lang&lt;/param&gt;
&lt;/model&gt;</code>
                </div>
            </div>
        </body>
    </text>
</TEI>